#!/bin/bash

# Applies a cmd to each line of the inputs.
#   The input can come from either a file or stdin via a pipe.
#   This is very similar to running:
       # cat $SOMEFILE | xargs -I line my_cmd line

# Determine the file to read from.
# Either the first argument or stdin if from a pipe
ftype=$(stat -f "%T" $stdin)
if [[ "$ftype" != "|" ]]; then
   if [[ "$#" -lt 1 ]]; then
     echo "map FILE [CMD] [ARGS...]"
     exit 1
   fi

   FILE=$1
   CMD="${@:2}"
else
   FILE=${FILE:-/dev/stdin}
   CMD=$@
fi

# CMD defaults to echo if no args are passed
# treats `{}` as variable substitution
CMD=${CMD:-echo}

# count number of `{}` in the command
DELIMETER_COUNT=$(echo "$CMD" | awk '{print gsub(/{}/,"\1")}')

if [[ $DELIMETER_COUNT == 0 ]]; then
  # append delimeter to the end if it doesn't have one
  CMD="$CMD {}"
fi

# Run command on each line of input.
while read -r line; do
  # escape characters that are disallowed by sed.
  sanitized_line=$(echo $line | sed -e 's/[\/&]/\\&/g')

  EXPANDED_CMD=$(echo "$CMD" | sed -e "s/{}/$sanitized_line/g")

  $EXPANDED_CMD
done < "$FILE"
